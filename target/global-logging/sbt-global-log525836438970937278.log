[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\lisjo\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\lisjo\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.5 (Oracle Corporation Java 17)
[debug]       Load.loadUnit: plugins took 104.9598ms
[debug]       Load.loadUnit: defsScala took 0.246499ms
[debug] [Loading] Scanning directory C:\Users\lisjo\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\lisjo\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 17.365999 ms
[debug]           Load.resolveProject(global-plugins) took 48.3436ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\lisjo\.sbt\1.0\plugins, plugins: List(<none>))) took 90.7175ms
[debug] [Loading] Done in C:\Users\lisjo\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 117.514401ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2464ms
[debug]     Load.loadUnit(file:/C:/Users/lisjo/.sbt/1.0/plugins/, ...) took 231.7313ms
[debug]   Load.apply: load took 393.1137ms
[debug]   Load.apply: resolveProjects took 5.133ms
[debug]   Load.apply: finalTransforms took 63.731701ms
[debug]   Load.apply: config.delegates took 13.320799ms
[debug]   Load.apply: Def.make(settings)... took 418.165101ms
[debug]   Load.apply: structureIndex took 98.471199ms
[debug]   Load.apply: mkStreams took 1.878ms
[info] loading global plugins from C:\Users\lisjo\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 4918.9701ms
[debug]           Load.loadUnit: plugins took 26.2409ms
[debug]           Load.loadUnit: defsScala took 0.0023ms
[debug] [Loading] Scanning directory C:\Users\lisjo\IdeaProjects\ScalaMapReduce\project
[debug]             Load.loadUnit: mkEval took 4.355ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\lisjo\IdeaProjects\ScalaMapReduce\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.1911 ms
[info] loading settings for project scalamapreduce-build from idea.sbt ...
[debug]               Load.resolveProject(scalamapreduce-build) took 2.3201ms
[debug]             Load.loadTransitive: finalizeProject(Project(id scalamapreduce-build, base: C:\Users\lisjo\IdeaProjects\ScalaMapReduce\project, plugins: List(<none>))) took 3.872ms
[debug] [Loading] Done in C:\Users\lisjo\IdeaProjects\ScalaMapReduce\project, returning: (scalamapreduce-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 1904.866ms
[debug]           Load.loadUnit: cleanEvalClasses took 4.9113ms
[debug]         Load.loadUnit(file:/C:/Users/lisjo/IdeaProjects/ScalaMapReduce/project/, ...) took 1936.7708ms
[debug]       Load.apply: load took 1938.0606ms
[debug]       Load.apply: resolveProjects took 0.0703ms
[debug]       Load.apply: finalTransforms took 11.601899ms
[debug]       Load.apply: config.delegates took 0.3388ms
[debug]       Load.apply: Def.make(settings)... took 54.4631ms
[debug]       Load.apply: structureIndex took 29.5561ms
[debug]       Load.apply: mkStreams took 0.001901ms
[info] loading project definition from C:\Users\lisjo\IdeaProjects\ScalaMapReduce\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 3245.373ms
[debug]     Load.loadUnit: defsScala took 0.002499ms
[debug] [Loading] Scanning directory C:\Users\lisjo\IdeaProjects\ScalaMapReduce
[debug]       Load.loadUnit: mkEval took 0.2954ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\lisjo\IdeaProjects\ScalaMapReduce, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.228601 ms
[info] loading settings for project scalamapreduce from build.sbt,plugins.sbt ...
[debug]         Load.resolveProject(scalamapreduce) took 50.1309ms
[debug]       Load.loadTransitive: finalizeProject(Project(id scalamapreduce, base: C:\Users\lisjo\IdeaProjects\ScalaMapReduce, plugins: List(<none>))) took 53.8074ms
[debug] [Loading] Done in C:\Users\lisjo\IdeaProjects\ScalaMapReduce, returning: (scalamapreduce)
[debug]     Load.loadUnit: loadedProjectsRaw took 1649.9027ms
[debug]     Load.loadUnit: cleanEvalClasses took 32.170899ms
[debug]   Load.loadUnit(file:/C:/Users/lisjo/IdeaProjects/ScalaMapReduce/, ...) took 4928.1879ms
[debug] Load.apply: load took 4930.0002ms
[debug] Load.apply: resolveProjects took 0.0737ms
[debug] Load.apply: finalTransforms took 26.4808ms
[debug] Load.apply: config.delegates took 0.2477ms
[debug] Load.apply: Def.make(settings)... took 52.1547ms
[debug] Load.apply: structureIndex took 17.6242ms
[debug] Load.apply: mkStreams took 0.0017ms
[info] set current project to ScalaMapReduce (in build file:/C:/Users/lisjo/IdeaProjects/ScalaMapReduce/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 49233 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 49233, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to ScalaMapReduce (in build file:/C:/Users/lisjo/IdeaProjects/ScalaMapReduce/)
[debug] > Exec(idea-shell, None, None)
